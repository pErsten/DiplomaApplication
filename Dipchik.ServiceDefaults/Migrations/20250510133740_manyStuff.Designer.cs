// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.Extensions.Hosting.DbContexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dipchik.ServiceDefaults.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20250510133740_manyStuff")]
    partial class manyStuff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Model.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Locale")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UtcCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UtcDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Common.Model.Entities.AppEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EventJsonData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UtcCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Common.Model.Entities.Guide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<byte>("Age")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CareerStartUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("Common.Model.Entities.Language", b =>
                {
                    b.Property<int>("Locale")
                        .HasColumnType("integer");

                    b.Property<string>("CitiesAndCountriesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayLocalizationsJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DisplayLocalizationsJson");

                    b.HasKey("Locale");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Common.Model.Entities.Location", b =>
                {
                    b.Property<int>("GeoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeoId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GeoId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Common.Model.Entities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Classification")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<bool>("GroupTour")
                        .HasColumnType("boolean");

                    b.Property<int>("GuideId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<int>>("Locations")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("PrivateTour")
                        .HasColumnType("boolean");

                    b.Property<int>("SpecialOffers")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TourType")
                        .HasColumnType("integer");

                    b.Property<bool>("WithGuide")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Common.Model.Entities.TourInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourInstances");
                });

            modelBuilder.Entity("Common.Model.Entities.TourInstanceRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("Rate")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RatedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TourInstanceId")
                        .HasColumnType("integer");

                    b.Property<int>("TouristAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("TouristCommentary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TourInstanceId");

                    b.HasIndex("TouristAccountId");

                    b.ToTable("TourInstanceRates");
                });

            modelBuilder.Entity("Common.Model.Entities.Guide", b =>
                {
                    b.HasOne("Common.Model.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Common.Model.Entities.Tour", b =>
                {
                    b.HasOne("Common.Model.Entities.Guide", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("Common.Model.Entities.TourInstance", b =>
                {
                    b.HasOne("Common.Model.Entities.Tour", "Tour")
                        .WithMany("Instances")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Common.Model.Entities.TourInstanceRate", b =>
                {
                    b.HasOne("Common.Model.Entities.TourInstance", "TourInstance")
                        .WithMany("Rates")
                        .HasForeignKey("TourInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Model.Entities.Account", "TouristAccount")
                        .WithMany()
                        .HasForeignKey("TouristAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourInstance");

                    b.Navigation("TouristAccount");
                });

            modelBuilder.Entity("Common.Model.Entities.Tour", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("Common.Model.Entities.TourInstance", b =>
                {
                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
