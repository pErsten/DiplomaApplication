@using Shared.Model
@using Shared.Model.Dtos
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField T="string" Label="Title" @bind-Value="Tour.Title" Required="true" RequiredError="Title is required!" />
            <MudTextField T="string" Label="Description" @bind-Value="Tour.Description" Lines="3" Required="true" RequiredError="Description is required!" />
            <MudTextField T="string" Label="Image URL" @bind-Value="Tour.ImageUrl" Required="true" RequiredError="Image URL is required!" />
            
            <MudNumericField T="decimal" Label="Price" @bind-Value="Tour.Price" Required="true" RequiredError="Price is required!"
                            Min="0" Max="100000" Step="100" Format="C2" />
            
            <MudNumericField T="int" Label="Duration (days)" @bind-Value="Tour.DurationDays" Required="true" RequiredError="Duration is required!"
                            Min="1" Max="60" Step="1" />
            
            <MudSelect T="TourTypeEnum" Label="Tour Type" @bind-Value="Tour.TourType" Required="true" RequiredError="Tour type is required!">
                @foreach (TourTypeEnum type in Enum.GetValues(typeof(TourTypeEnum)))
                {
                    @if (type != TourTypeEnum.None)
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                }
            </MudSelect>
            
            <MudSelect T="TourClassificationEnum" Label="Classification" @bind-Value="Tour.Classification" Required="true" RequiredError="Classification is required!">
                @foreach (TourClassificationEnum classification in Enum.GetValues(typeof(TourClassificationEnum)))
                {
                    <MudSelectItem Value="@classification">@classification</MudSelectItem>
                }
            </MudSelect>
            
            <MudSelect T="SpecialOfferEnum" Label="Special Offer" @bind-Value="Tour.SpecialOffers">
                @foreach (SpecialOfferEnum offer in Enum.GetValues(typeof(SpecialOfferEnum)))
                {
                    <MudSelectItem Value="@offer">@offer</MudSelectItem>
                }
            </MudSelect>
            
            <MudSwitch T="bool" @bind-Checked="Tour.WithGuide" Label="With Guide" Color="Color.Primary" />
            
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudAutocomplete T="int" Label="Add Location" 
                               SearchFunc="@SearchLocations"
                               ToStringFunc="@(id => globals.LocaleLocalizations[id].City)"
                               @bind-Value="selectedLocationId"
                               Placeholder="Type to search locations..." />
                <MudButton OnClick=@(() =>OnLocationSelected())
                          Disabled="@(selectedLocationId == 0)"
                          Variant="Variant.Filled" 
                          Color="Color.Primary"
                          Class="mt-4">
                    Add
                </MudButton>
            </MudStack>
            
            <MudPaper Class="pa-2 mt-2" Style="max-height: 200px; overflow-y: auto;">
                @if (selectedLocations.Any())
                {
                    <MudList T="int" Dense="true">
                        @foreach (var locationId in selectedLocations)
                        {
                            <MudListItem>
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudText>@globals.LocaleLocalizations[locationId].City</MudText>
                                    <MudSpacer />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveLocation(locationId))" />
                                </MudStack>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText Color="Color.Secondary" Class="text-center">No locations selected</MudText>
                }
            </MudPaper>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!success)">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public TourDto Tour { get; set; } = new();
    [Parameter] public bool IsNew { get; set; }

    private MudForm form = null!;
    private bool success;
    private List<int> selectedLocations = new();
    private int selectedLocationId;

    protected override void OnInitialized()
    {
        if (!IsNew)
        {
            selectedLocations = Tour.Locations;
        }
    }

    private async Task<IEnumerable<int>> SearchLocations(string searchText, CancellationToken stoppingToken)
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return Array.Empty<int>();

        return globals.LocaleLocalizations
            .Where(l => l.Value.City.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Select(l => l.Key)
            .Where(id => !selectedLocations.Contains(id));
    }

    private void OnLocationSelected()
    {
        if (!selectedLocations.Contains(selectedLocationId))
        {
            selectedLocations.Add(selectedLocationId);
        }
    }

    private void RemoveLocation(int locationId)
    {
        selectedLocations.Remove(locationId);
    }

    private void Cancel() => MudDialog.Close();

    private async Task Submit()
    {
        Tour.Locations = selectedLocations;
        
        try
        {
            if (IsNew)
            {
                await Http.PostAsJsonAsync("api/tour", Tour);
                Snackbar.Add("Tour created successfully", Severity.Success);
            }
            else
            {
                await Http.PutAsJsonAsync($"api/tour/{Tour.Id}", Tour);
                Snackbar.Add("Tour updated successfully", Severity.Success);
            }
            
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error saving tour", Severity.Error);
        }
    }
} 