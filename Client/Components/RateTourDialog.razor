@using System.Net.Http.Headers
@using Shared.Model.Dtos
@inject ISnackbar Snackbar
@inject IConfiguration Configuration

<MudDialog>
    <DialogContent>
        <MudStack Spacing="3">
            <MudText Typo="Typo.h6">@globals.Localizations["MyBookings_RateTour"]</MudText>
            <MudText Typo="Typo.body2">@globals.Localizations["MyBookings_RateTourDescription"]</MudText>
            
            <MudRating @bind-SelectedValue="Rating" 
                      Color="Color.Primary" 
                      Size="Size.Large" 
                      MaxValue="5" />

            <MudTextField @bind-Value="Comment"
                         Label="@globals.Localizations["MyBookings_RateTourComment"]"
                         Lines="3"
                         Variant="Variant.Outlined" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@globals.Localizations["UI_Cancel"]</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="Submit" 
                  Disabled="@(Rating == 0 || string.IsNullOrWhiteSpace(Comment))">
            @globals.Localizations["UI_Submit"]
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int TourInstanceId { get; set; }

    private int Rating { get; set; }
    private string Comment { get; set; } = string.Empty;

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        try
        {
            var serverUrl = Configuration.GetValue<string>("ServerUrl");
            using var cli = new HttpClient();
            cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", globals.Token);

            var request = new TourRateDto
            {
                TourInstanceId = TourInstanceId,
                Rate = (byte)(Rating * 10), // Convert to 0-50 scale
                Commentary = Comment
            };

            var response = await cli.PostAsJsonAsync($"{serverUrl}/Tours/RateTour", request);
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add(globals.Localizations["Messages_RatingSubmitted"], Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"{globals.Localizations["Messages_FailedToSubmitRating"]} - {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(globals.Localizations["Messages_FailedToSubmitRating"], Severity.Error);
        }
    }
} 