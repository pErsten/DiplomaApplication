@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using System.Text.Json
@using Shared.Model.Dtos
@inject IConfiguration Configuration
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

<h3>Login</h3>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                    @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Button" OnClick="OnValidLogin" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center" Style="color:red">
                @errorMsg
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>
@code
{
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    string errorMsg;

    public class RegisterAccountForm
    {
        [Required]
        //[StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        //[StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

    }

    private async Task OnValidLogin()
    {
        await Authenticate("login");
    }
    private async Task OnValidSubmit(EditContext context)
    {
        await Authenticate("register");
    }

    private async Task Authenticate(string endpoint)
    {
        string serverUrl = Configuration.GetValue<string>("ServerUrl");

        var token = await GetToken(serverUrl, endpoint);
        var accountData = await GetAccountData(serverUrl, token);
        if (token is null || accountData is null)
        {
            errorMsg = "Invalid username or password.";
            return;
        }

        await globals.Login(jsRuntime, new AuthenticatedUser
        {
            AvatarUrl = accountData.AvatarUrl,
            Token = token,
            Username = accountData.Username,
        });

        success = true;
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }

    private async Task<string> GetToken(string serverUrl, string endpoint)
    {

        using var cli = new HttpClient();
        var response = await cli.GetAsync($"{serverUrl}/auth/{endpoint}?login={model.Username}&password={model.Password}");
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            errorMsg = response.ReasonPhrase;
            return null;
        }

        return (await response.Content.ReadAsStringAsync()).Trim('"');
    }

    private async Task<AccountInfoDto> GetAccountData(string serverUrl, string token)
    {

        using var cli = new HttpClient();
        cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await cli.GetAsync($"{serverUrl}/Account/GetAccountInfo");
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            errorMsg = response.ReasonPhrase;
            return null;
        }

        var json = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<AccountInfoDto>(json, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });
    }
}