@page "/tour/{InstanceId:int}"
@using System.Text.Json
@using System.Net.Http.Headers
@using Shared.Model.Dtos
@inject Globals globals
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject ISnackbar Snackbar

<PageTitle>@globals.Localizations["Tour_Details_Title"]</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    @if (IsLoading)
    {
        <MudProgressCircular Indeterminate Color="Color.Primary" />
    }
    else if (tour == null)
    {
        <MudText Typo="Typo.h5">@globals.Localizations["Tour_NotFound"]</MudText>
    }
    else
    {
        <MudGrid GutterSize="3">
            <MudItem xs="12" md="6">
                <MudImage Height="400" Src="@(string.IsNullOrEmpty(tour.ImageUrl) ? "https://via.placeholder.com/600x400?text=Tour" : tour.ImageUrl)" Alt="@tour.Title" Style="width:100%; border-radius:12px;" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h4" Class="mb-2">@tour.Title</MudText>
                <MudStack Row=true AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                    <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Guide"]:</b></MudText>
                    <MudAvatar Size="Size.Small">
                        <MudImage Src=@tour.GuideAvatarUrl></MudImage>
                    </MudAvatar>
                    <MudText Typo="Typo.subtitle2">@tour.GuideName @tour.GuideSurname</MudText>
                </MudStack>
                <MudText Typo="Typo.body1" Class="mb-2">@tour.Description</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Locations"]:</b> @string.Join(", ", tour.Locations.Select(l => globals.LocaleLocalizations[l].City))</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Dates"]:</b> @tour.StartDate.Value.ToString("dd MMM yyyy") â€“ @tour.EndDate.Value.ToString("dd MMM yyyy")</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Duration"]:</b> @((tour.EndDate - tour.StartDate).Value.Days) @globals.Localizations["Tours_Filter_Days"]</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tours_Filter_TourType"]:</b> @globals.Localizations[$"TourType_{tour.TourType}"]</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Price"]:</b> $@tour.Price</MudText>
                <MudStack Row=true AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                    <MudText Typo="Typo.body2">@globals.Localizations["Tour_Rating"]:</MudText>
                    <MudRating SelectedValue=@((int)tour.Rating) MaxValue="5" ReadOnly Size="Size.Small" />
                    <MudText Typo="Typo.caption">@tour.Rating.ToString("0.0")</MudText>
                </MudStack>
                <MudDivider Class="my-2" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!globals.IsLoggedIn)" OnClick="BookTour">
                    @globals.Localizations["Tour_BookButton"]
                </MudButton>
                @if (!globals.IsLoggedIn)
                {
                    <MudText Typo="Typo.caption" Color="Color.Error">@globals.Localizations["Tour_LoginToBook"]</MudText>
                }
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int InstanceId { get; set; }

    private TourDescDto? tour = new TourDescDto();
    private bool IsLoading = true;
    private bool IsBooking = false;
    private int SelectedParticipants = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        try
        {
            var serverUrl = Configuration.GetValue<string>("ServerUrl");
            using var cli = new HttpClient();
            cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", globals.Token);

            var response = await cli.GetAsync($"{serverUrl}/Tours/GetById/{InstanceId}");
            var result = await response.Content.ReadAsStringAsync();
            
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add($"{globals.Localizations["Messages_FailedToGetData"]} - {result}", Severity.Error);
                return;
            }

            tour = JsonSerializer.Deserialize<TourDescDto>(result, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (tour == null)
            {
                Snackbar.Add(globals.Localizations["Messages_TourNotFound"], Severity.Error);
                Navigation.NavigateTo("/tours");
                return;
            }

            SelectedParticipants = Math.Min(SelectedParticipants, tour.MaxParticipants - tour.CurrentParticipants);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{globals.Localizations["Messages_FailedToGetData"]} - {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task BookTour()
    {
        if (tour == null) return;

        IsBooking = true;
        try
        {
            var serverUrl = Configuration.GetValue<string>("ServerUrl");
            using var cli = new HttpClient();
            cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", globals.Token);

            var response = await cli.PostAsync($"{serverUrl}/Tours/BookTour/{InstanceId}?participants={SelectedParticipants}", null);
            var result = await response.Content.ReadAsStringAsync();
            
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add($"{globals.Localizations["Messages_FailedToBookTour"]} - {result}", Severity.Error);
                return;
            }

            Snackbar.Add(globals.Localizations["Messages_TourBookedSuccessfully"], Severity.Success);
            await LoadData(); // Refresh data to update current participants
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{globals.Localizations["Messages_FailedToBookTour"]} - {ex.Message}", Severity.Error);
        }
        finally
        {
            IsBooking = false;
        }
    }
} 