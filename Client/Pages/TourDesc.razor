@page "/tour/{InstanceId:int}"
@using Common.Model.Entities
@using System.Text.Json
@using System.Net.Http.Headers
@inject Globals globals
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject ISnackbar Snackbar

<PageTitle>@globals.Localizations["Tour_Details_Title"]</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    @if (IsLoading)
    {
        <MudProgressCircular Indeterminate Color="Color.Primary" />
    }
    else if (Instance == null)
    {
        <MudText Typo="Typo.h5">@globals.Localizations["Tour_NotFound"]</MudText>
    }
    else
    {
        <MudGrid GutterSize="3">
            <MudItem xs="12" md="6">
                <MudImage Src="@(string.IsNullOrEmpty(Instance.Tour.ImageUrl) ? "https://via.placeholder.com/600x400?text=Tour" : Instance.Tour.ImageUrl)" Alt="@Instance.Tour.Title" Style="width:100%; height:auto; border-radius:12px;" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h4" Class="mb-2">@Instance.Tour.Title</MudText>
                <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                    <MudAvatar Size="Size.Small" Image="@Instance.Tour.Guide.Account.AvatarUrl" />
                    <MudText Typo="Typo.subtitle2">@Instance.Tour.Guide.Name @Instance.Tour.Guide.Surname</MudText>
                </MudStack>
                <MudText Typo="Typo.body1" Class="mb-2">@Instance.Tour.Description</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Locations"]:</b> @string.Join(", ", Instance.Tour.Locations.Select(l => l))</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Dates"]:</b> @Instance.StartDate.ToString("dd MMM yyyy") â€“ @Instance.EndDate.ToString("dd MMM yyyy")</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Duration"]:</b> @((Instance.EndDate - Instance.StartDate).TotalDays) @globals.Localizations["Tours_Filter_Days"]</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Type"]:</b> @globals.Localizations[$"TourType_{Instance.Tour.TourType}"]</MudText>
                <MudText Typo="Typo.body2" Class="mb-1"><b>@globals.Localizations["Tour_Price"]:</b> $@Instance.Tour.Price</MudText>
                <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                    <MudText Typo="Typo.body2">@globals.Localizations["Tour_Rating"]:</MudText>
                    <MudRating Value="@(Instance.Rating ?? 0)" MaxValue="5" ReadOnly Size="Size.Small" />
                    <MudText Typo="Typo.caption">@(Instance.Rating?.ToString("0.0") ?? "0.0")</MudText>
                </MudStack>
                <MudDivider Class="my-2" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!globals.IsLoggedIn)" OnClick="BookTour">
                    @globals.Localizations["Tour_BookButton"]
                </MudButton>
                @if (!globals.IsLoggedIn)
                {
                    <MudText Typo="Typo.caption" Color="Color.Error">@globals.Localizations["Tour_LoginToBook"]</MudText>
                }
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int InstanceId { get; set; }

    private TourInstance? Instance;
    private bool IsLoading = true;
    private bool IsBooking = false;
    private int SelectedParticipants = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        try
        {
            var serverUrl = Configuration.GetValue<string>("ServerUrl");
            using var cli = new HttpClient();
            cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", globals.Token);

            var response = await cli.GetAsync($"{serverUrl}/Tours/GetTourById/{InstanceId}");
            var result = await response.Content.ReadAsStringAsync();
            
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add($"{globals.Localizations["Messages_FailedToGetData"]} - {result}", Severity.Error);
                return;
            }

            Instance = JsonSerializer.Deserialize<TourInstance>(result, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (Instance == null)
            {
                Snackbar.Add(globals.Localizations["Messages_TourNotFound"], Severity.Error);
                Navigation.NavigateTo("/tours");
                return;
            }

            SelectedParticipants = Math.Min(SelectedParticipants, Instance.MaxParticipants - Instance.CurrentParticipants);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{globals.Localizations["Messages_FailedToGetData"]} - {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task BookTour()
    {
        if (Instance == null) return;

        IsBooking = true;
        try
        {
            var serverUrl = Configuration.GetValue<string>("ServerUrl");
            using var cli = new HttpClient();
            cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", globals.Token);

            var response = await cli.PostAsync($"{serverUrl}/Tours/BookTour/{InstanceId}?participants={SelectedParticipants}", null);
            var result = await response.Content.ReadAsStringAsync();
            
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add($"{globals.Localizations["Messages_FailedToBookTour"]} - {result}", Severity.Error);
                return;
            }

            Snackbar.Add(globals.Localizations["Messages_TourBookedSuccessfully"], Severity.Success);
            await LoadData(); // Refresh data to update current participants
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{globals.Localizations["Messages_FailedToBookTour"]} - {ex.Message}", Severity.Error);
        }
        finally
        {
            IsBooking = false;
        }
    }
} 