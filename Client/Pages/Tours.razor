@page "/tours"
@using System.Net.Http.Headers
@using Shared.Model
@using Shared.Model.Dtos
@using System.Text.Json
@inject Globals globals
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject ISnackbar Snackbar

<PageTitle>Tours</PageTitle>
<MudContainer MaxWidth="MaxWidth.False" Class="p-0">
    <div style="position: relative; height: 800px;">
        <MudImage ObjectPosition="ObjectPosition.Top"
        ObjectFit="ObjectFit.Cover"
        Style="width:100%; height:100%"
        Src="https://res.cloudinary.com/da7kbbrap/image/upload/v1746448800/ChatGPT_Image_May_5_2025_03_39_39_PM_kbvhla.png"
        Class="rounded-lg" />

        <div class="d-flex flex-column align-items-center justify-center z-100 absolute"
        style="top: 0; left: 0; right: 0; bottom: 0; color: white">
            <MudText Typo="Typo.h3" Class="mb-4">@globals.Localizations["Tours_Hero_Title"]</MudText>

            <MudPaper Class="d-flex align-center gap-2 p-3 rounded" Style="position: relative; overflow: visible;">
                <!-- Destination Search -->
                <MudAutocomplete T="int" 
                               Placeholder="@globals.Localizations["Tours_Filter_SearchDestinations"]" 
                               SearchFunc="SearchDestinations" 
                               Style="width: 200px;"
                               @bind-Value="SelectedDestination"
                               ToStringFunc="@(id => globals.LocaleLocalizations[id].City)" />

                <!-- Date Picker -->
                <MudDatePicker @bind-Date="Filters.StartDate" Placeholder="@globals.Localizations["Tours_Filter_StartDate"]" />

                <!-- Fake Dropdown Toggle -->
                <MudButton Variant="Variant.Outlined" 
                          OnClick="@ToggleFilter" 
                          EndIcon=@(ShowFilter ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)
                          Disabled="@IsLoading">
                    @if (ShowFilter)
                    {
                        <div>@globals.Localizations["Tours_Filter_HideFilters"]</div>
                    }
                    else
                    {
                        <div>@globals.Localizations["Tours_Filter_ShowFilters"]</div>
                    }
                </MudButton>

                <!-- Dropdown Content -->
                @if (ShowFilter)
                {
                    <MudPaper Class="p-4 mt-2 absolute z-100" Style="top: 100%; left: 0; width: 100%; box-shadow: var(--mud-elevation-8); background: white;">
                        @if (IsLoading)
                        {
                            <MudProgressCircular Indeterminate Color="Color.Primary" />
                        }
                        else
                        {
                            <MudStack Spacing="3" Class="p-4">
                                <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudLink Class="text-primary" OnClick="ClearAll">@globals.Localizations["Tours_Filter_ClearAll"]</MudLink>
                                </MudStack>

                                <!-- Duration -->
                                <MudStack>
                                    <MudText Typo="Typo.subtitle2">@globals.Localizations["Tours_Filter_Duration"]</MudText>
                                    <MudRangeSlider Min="@MinPossibleDuration" 
                                                  Max="@MaxPossibleDuration" 
                                                  Step="1" 
                                                  @bind-Value="Filters.FromDurationDays"
                                                  @bind-UpperValue="Filters.ToDurationDays"
                                                  Range="true"
                                                  Immediate="true"
                                                  MinDistance="1" />
                                    <MudText Typo="Typo.caption">@Filters.FromDurationDays – @Filters.ToDurationDays @globals.Localizations["Tours_Filter_Days"]</MudText>
                                </MudStack>

                                <!-- Price Range -->
                                <MudStack>
                                    <MudText Typo="Typo.subtitle2">@globals.Localizations["Tours_Filter_Price"]</MudText>
                                    <MudRangeSlider Min="@MinPossiblePrice" 
                                                  Max="@MaxPossiblePrice" 
                                                  Step="50"
                                                  @bind-Value="Filters.FromPrice" 
                                                  @bind-UpperValue="Filters.ToPrice" 
                                                  Range="true"
                                                  Immediate="true"
                                                  MinDistance="50" />
                                    <MudText Typo="Typo.caption">$@Filters.FromPrice – $@Filters.ToPrice</MudText>
                                </MudStack>

                                <!-- Number of Destinations -->
                                <MudText Typo="Typo.subtitle2">@globals.Localizations["Tours_Filter_NumberOfDestinations"]</MudText>
                                <MudRadioGroup T="DestinationCountEnum" @bind-SelectedOption="Filters.DestinationsCount">
                                    <MudRadio T="DestinationCountEnum" Option="DestinationCountEnum.Single">@globals.Localizations["Tours_Filter_SingleLocation"]</MudRadio>
                                    <MudRadio T="DestinationCountEnum" Option="DestinationCountEnum.TwoToThree">@globals.Localizations["Tours_Filter_2_3Locations"]</MudRadio>
                                    <MudRadio T="DestinationCountEnum" Option="DestinationCountEnum.FourPlus">@globals.Localizations["Tours_Filter_4PlusLocations"]</MudRadio>
                                </MudRadioGroup>

                                <!-- Tour Type -->
                                <MudText Typo="Typo.subtitle2">@globals.Localizations["Tours_Filter_TourType"]</MudText>
                                <MudSelect MultiSelectionTextFunc="MultiSelectionTextFunc" 
                                         T="TourTypeEnum" 
                                         MultiSelection="true" 
                                         @bind-SelectedValues="Filters.TourTypes">
                                    @foreach (TourTypeEnum type in Enum.GetValues(typeof(TourTypeEnum)))
                                    {
                                        @if (type != TourTypeEnum.None)
                                        {
                                            <MudSelectItem Value="@type">@globals.Localizations[$"TourType_{type}"]</MudSelectItem>
                                        }
                                    }
                                </MudSelect>

                                <!-- Rating -->
                                <MudStack>
                                    <MudText Typo="Typo.subtitle2">@globals.Localizations["Tours_Filter_Rating"]</MudText>
                                    <MudSlider Min="1.0" 
                                             Max="5.0" 
                                             Step="0.1" 
                                             @bind-Value="Filters.MinRating"/>
                                    <MudText Typo="Typo.caption">@Filters.MinRating.ToString("0.0") @globals.Localizations["Tours_Filter_Stars"]</MudText>
                                </MudStack>

                                <!-- Format Options -->
                                <MudText Typo="Typo.subtitle2">@globals.Localizations["Tours_Filter_TourFormat"]</MudText>
                                <MudCheckBox T=bool @bind-Checked="Filters.WithGuide" Label="@globals.Localizations["Tours_Filter_WithGuide"]" />
                                <MudCheckBox T=bool @bind-Checked="Filters.PrivateTour" Label="@globals.Localizations["Tours_Filter_PrivateTour"]" />
                                <MudCheckBox T=bool @bind-Checked="Filters.GroupTour" Label="@globals.Localizations["Tours_Filter_GroupTour"]" />

                                <!-- Special Offers -->
                                <MudText Typo="Typo.subtitle2">@globals.Localizations["Tours_Filter_SpecialOffers"]</MudText>
                                <MudCheckBox T=bool @bind-Checked="Filters.OnSale" Label="@globals.Localizations["Tours_Filter_OnSale"]" />
                                <MudCheckBox T=bool @bind-Checked="Filters.StartsSoon" Label="@globals.Localizations["Tours_Filter_StartsSoon"]" />
                                <MudCheckBox T=bool @bind-Checked="Filters.SpecialDiscount" Label="@globals.Localizations["Tours_Filter_SpecialDiscount"]" />
                            </MudStack>
                        }
                    </MudPaper>
                }
            </MudPaper>
        </div>
    </div>

    <!-- Featured Tours -->
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
        <MudText Typo="Typo.h5" Class="mb-4">@globals.Localizations["Tours_FeaturedTours"]</MudText>
        @if (IsLoadingRecommendations)
        {
            <MudProgressCircular Indeterminate Color="Color.Primary" />
        }
        else if (RecommendedTours.Any())
        {
            <MudGrid GutterSize="3">
                @foreach (var tour in RecommendedTours)
                {
                    <MudItem xs="12" sm="6" md="4">
                        @TourInstanceCard(tour)
                    </MudItem>
                }
            </MudGrid>
            @if (!string.IsNullOrEmpty(RecommendationReason))
            {
                <MudText Typo="Typo.body2" Class="mt-2 text-muted">@RecommendationReason</MudText>
            }
        }
        else
        {
            <MudGrid GutterSize="3">
                @foreach (var tour in AllTours.Take(3))
                {
                    <MudItem xs="12" sm="6" md="4">
                        @TourInstanceCard(tour)
                    </MudItem>
                }
            </MudGrid>
        }
    </MudContainer>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <!-- Tours Display -->
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-3">@globals.Localizations["Tours_SearchResults"]</MudText>
            @if (IsLoading)
            {
                <MudProgressCircular Indeterminate Color="Color.Primary" />
            }
            else if (!AllTours.Any())
            {
                <MudText Typo="Typo.subtitle1">@globals.Localizations["Tours_NoResultsFound"]</MudText>
            }
            else
            {
                <MudGrid GutterSize="3">
                    @foreach (var tour in AllTours)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            @TourInstanceCard(tour)
                        </MudItem>
                    }
                </MudGrid>
                <MudTablePager PageSizeOptions="new int[] {6, 12, 24}" 
                             PageSize="@PageSize" 
                             PageIndex="@PageIndex" 
                             RowsPerPageString="" 
                             OnPageChanged="OnPageChanged" 
                             RowsCount="@TotalCount" />
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    // Filter state
    private bool ShowFilter;
    private int SelectedDestination;
    private TourFiltersDto Filters = new TourFiltersDto
    {
        TourTypes = new List<TourTypeEnum>(),
        FromDurationDays = 1,
        ToDurationDays = int.MaxValue,
        FromPrice = 0M,
        ToPrice = decimal.MaxValue,
        MinRating = 1.0d
    };
    private bool IsLoading = true;

    // Range values
    private int MinPossibleDuration;
    private int MaxPossibleDuration;
    private decimal MinPossiblePrice;
    private decimal MaxPossiblePrice;

    // Data
    private List<TourDto> AllTours = new();
    private int TotalCount;
    private int PageIndex = 0;
    private int PageSize = 6;
    private string SortBy = "price";

    private List<TourDto> RecommendedTours = new();
    private string RecommendationReason = string.Empty;
    private bool IsLoadingRecommendations = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadData(), LoadRecommendations());
    }

    private async Task LoadData()
    {
        IsLoading = true;
        try
        {
            var serverUrl = Configuration.GetValue<string>("ServerUrl");
            using var cli = new HttpClient();

            // Fetch filtered tours
            var response = await cli.PostAsJsonAsync($"{serverUrl}/Tours/GetAll?page={PageIndex + 1}&pageSize={PageSize}", Filters);
            var result = await response.Content.ReadAsStringAsync();
            
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add($"{globals.Localizations["Messages_FailedToGetData"]} - {result}", Severity.Error);
                return;
            }

            var toursResponse = JsonSerializer.Deserialize<PagedResult<TourDto>>(result, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            AllTours = toursResponse.Items;
            TotalCount = toursResponse.TotalCount;

            MinPossibleDuration = toursResponse.MinDuration;
            MaxPossibleDuration = toursResponse.MaxDuration;
            MinPossiblePrice = toursResponse.MinPrice;
            MaxPossiblePrice = toursResponse.MaxPrice;
            Filters.FromDurationDays = MinPossibleDuration;
            Filters.ToDurationDays = MaxPossibleDuration;
            Filters.FromPrice = MinPossiblePrice;
            Filters.ToPrice = MaxPossiblePrice;
            Filters.SortBy = SortBy;
            Filters.SelectedDestination = SelectedDestination;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{globals.Localizations["Messages_FailedToGetData"]} - {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadRecommendations()
    {
        if (string.IsNullOrEmpty(globals.Token))
        {
            IsLoadingRecommendations = false;
            return;
        }

        try
        {
            var serverUrl = Configuration.GetValue<string>("ServerUrl");
            using var cli = new HttpClient();
            cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", globals.Token);

            var response = await cli.GetAsync($"{serverUrl}/Tours/GetRecommendations");
            var result = await response.Content.ReadAsStringAsync();
            
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var recommendation = JsonSerializer.Deserialize<TourRecommendationResponseDto>(result, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (recommendation != null)
                {
                    RecommendedTours = recommendation.RecommendedTours;
                    RecommendationReason = recommendation.RecommendationReason;
                }
            }
        }
        catch (Exception)
        {
            RecommendedTours.Clear();
            RecommendationReason = string.Empty;
        }
        finally
        {
            IsLoadingRecommendations = false;
        }
    }
    
    string MultiSelectionTextFunc(List<string?>? arg)
        => string.Join(", ", (Filters.TourTypes ?? new List<TourTypeEnum>()).Select(x => globals.Localizations[$"TourType_{x}"]));

    private void ToggleFilter() => ShowFilter = !ShowFilter;

    private void ClearAll()
    {
        SelectedDestination = 0;
        Filters = new TourFiltersDto
        {
            TourTypes = new List<TourTypeEnum>(),
            FromDurationDays = 1,
            ToDurationDays = int.MaxValue,
            FromPrice = 0M,
            ToPrice = decimal.MaxValue,
            MinRating = 1.0d
        };
        ApplyFilters();
    }

    private async Task<IEnumerable<int>> SearchDestinations(string value, CancellationToken stoppingToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return globals.LocaleLocalizations.Keys;
        return globals.LocaleLocalizations
            .Where(x => x.Value.City.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Key);
    }

    private void ApplyFilters()
    {
        PageIndex = 0;
        _ = LoadData();
    }

    private void OnPageChanged(int page)
    {
        PageIndex = page;
        _ = LoadData();
    }

    private void OnSortChanged(string value)
    {
        SortBy = value;
        ApplyFilters();
    }

    // Helper for displaying a tour instance card
    private RenderFragment TourInstanceCard(TourDto tour) => __builder =>
    {
        <MudCard>
            <MudCardMedia Image="@(string.IsNullOrEmpty(tour.ImageUrl) ? "https://via.placeholder.com/400x200?text=Tour" : tour.ImageUrl)" Height="180" />
            <MudCardContent>
                <MudText Typo="Typo.subtitle1">@tour.Title</MudText>
                <MudText Typo="Typo.body2">@string.Join(", ", tour.Locations.Select(l => globals.LocaleLocalizations[l].City))</MudText>
                <MudText Typo="Typo.caption">@tour.DurationDays @globals.Localizations["Tours_Filter_Days"]</MudText>
                <MudText Typo="Typo.caption">$@tour.Price</MudText>
                <MudDivider Class="my-2" />
                <MudStack Row=true AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Size="Size.Small">
                        <MudImage Src=@tour.GuideAvatarUrl></MudImage>
                    </MudAvatar>
                    <MudText Typo="Typo.caption">@tour.GuideName @tour.GuideSurname</MudText>
                </MudStack>
            </MudCardContent>
            <MudCardActions>
                <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Disabled />
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => NavigateToTour(tour.Id)">@globals.Localizations["UI_Details"]</MudButton>
            </MudCardActions>
        </MudCard>;
    };

    private Color GetStatusColor(TourInstanceStatus status) => status switch
    {
        TourInstanceStatus.Scheduled => Color.Info,
        TourInstanceStatus.Completed => Color.Secondary,
        TourInstanceStatus.Cancelled => Color.Error,
        TourInstanceStatus.FullyBooked => Color.Primary,
        _ => Color.Default
    };

    private void NavigateToTour(int tourId)
    {
        Navigation.NavigateTo($"/tour/{tourId}");
    }
}
